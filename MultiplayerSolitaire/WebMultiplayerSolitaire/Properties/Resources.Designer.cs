//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebCardGame.Properties {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WebCardGame.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class Card {
        ///    constructor(cardIndex) {
        ///        this.RootNode = createElementWithClass(&quot;table&quot;, &quot;card&quot;);
        ///        this.CardIndex = cardIndex;
        ///        var row = document.createElement(&quot;tr&quot;);
        ///        this.ContentHolder = document.createElement(&quot;div&quot;);
        ///        row.appendChild(this.ContentHolder);
        ///        this.CardLabel = document.createTextNode(&quot;? of ?&quot;);
        ///        this.ContentHolder.appendChild(this.CardLabel);
        ///        this.RootNode.appendChild(row);
        ///        row = document.createElement(&quot;tr&quot;);
        ///      [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Card {
            get {
                return ResourceManager.GetString("Card", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class CardDisplay {
        ///    constructor() {
        ///        this.RootNode = createElementWithClass(&quot;table&quot;, &quot;cardDisplay&quot;);
        ///        var row = document.createElement(&quot;tr&quot;);
        ///        this.RootNode.appendChild(row);
        ///        this.Slots = [3]; // Array of card slots.
        ///        for (var index = 0; index &lt; 3; ++index) {
        ///            var slot = new CardSlot(index);
        ///            this.Slots[index] = slot;
        ///            var col = document.createElement(&quot;th&quot;);
        ///            row.appendChild(col);
        ///            col.appendChild(this. [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CardDisplay {
            get {
                return ResourceManager.GetString("CardDisplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class CardMini {
        ///    constructor(card) {
        ///        this.RootNode = createElementWithClass(&quot;div&quot;, &quot;CardMini&quot;);
        ///        this.Label = document.createTextNode(&quot;&quot;);
        ///        this.RootNode.appendChild(this.Label);
        ///        this.Setup(card);
        ///    }
        ///
        ///    Setup(card) {
        ///        this.Label.textContent = ValueLabel[card.Value] + SigilSymbol[card.Sigil];
        ///    }
        ///}.
        /// </summary>
        internal static string CardMini {
            get {
                return ResourceManager.GetString("CardMini", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class CardSlot {
        ///    constructor(index) {
        ///        this.Index = index;
        ///        this.RootNode = createElementWithClass(&quot;table&quot;, &quot;cardSlot&quot;);
        ///        var row = document.createElement(&quot;tr&quot;);
        ///        this.RootNode.appendChild(row);
        ///        this.CardReceptacle = row;
        ///        this.Card = null;
        ///
        ///        row = document.createElement(&quot;tr&quot;);
        ///        this.RootNode.appendChild(row);
        ///        this.Button = document.createElement(&quot;button&quot;);
        ///        row.appendChild(this.Button);
        ///        this.ButtonLabel = docum [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CardSlot {
            get {
                return ResourceManager.GetString("CardSlot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class Deck {
        ///    constructor() {
        ///        this.RootNode = createElementWithClass(&quot;table&quot;, &quot;deck&quot;);
        ///        this.NumberOfCards = 0;
        ///        var row = document.createElement(&quot;tr&quot;);
        ///        this.RootNode.appendChild(row);
        ///        this.CardCountLabel = document.createTextNode(&quot;&quot;);
        ///        row.appendChild(this.CardCountLabel);
        ///    }
        ///
        ///    Setup(gameState) {
        ///        this.CardCountLabel.textContent = &quot;Cards in deck &quot; + gameState.CardsInDeck;
        ///    }
        ///}.
        /// </summary>
        internal static string Deck {
            get {
                return ResourceManager.GetString("Deck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class DiscardPile {
        ///    constructor() {
        ///        this.RootNode = createElementWithClass(&quot;table&quot;, &quot;discardPile&quot;);
        ///        this.Label = document.createTextNode(&quot;Cards in discard pile : ?&quot;);
        ///        this.RootNode.appendChild(this.Label);
        ///    }
        ///
        ///    Setup(gameState) {
        ///        this.Label.textContent = &quot;Cards in discard Pile : &quot; + gameState.CardsInDiscardPile;
        ///    }
        ///}.
        /// </summary>
        internal static string DiscardPile {
            get {
                return ResourceManager.GetString("DiscardPile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class EndGame {
        ///    constructor() {
        ///        this.RootNode = createElementWithClass(&quot;table&quot;,&quot;EndGame&quot;);
        ///
        ///        this.EndGameLabel = document.createTextNode(&quot;Game Ended&quot;);
        ///        var col = document.createElement(&quot;th&quot;);
        ///        var row = document.createElement(&quot;tr&quot;);
        ///        col.appendChild(row);
        ///        row.appendChild(this.EndGameLabel);
        ///        this.RootNode.appendChild(col);
        ///        this.WinningPlayerLabel = document.createTextNode(&quot;Player ? Win&quot;);
        ///        row = document.createElement(&quot;tr&quot;);
        /// [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string EndGame {
            get {
                return ResourceManager.GetString("EndGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à .
        /// </summary>
        internal static string Faces {
            get {
                return ResourceManager.GetString("Faces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à &lt;!doctype html&gt;
        ///&lt;meta charset=&quot;utf-8&quot;&gt;
        ///&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;Style.css&quot; /&gt;
        ///
        ///
        ///&lt;div id=mainContainer&gt;
        ///    &lt;h2&gt;Two Players Solitaire&lt;/h2&gt;
        ///    &lt;div id=playArea&gt;&lt;/div&gt;
        ///&lt;/div&gt;
        ///
        ///&lt;div id=debugArea&gt;
        ///    &lt;button onclick=&quot;toggleDebug()&quot;&gt; &lt;/button&gt;
        ///    &lt;div id=debugOutput&gt;&lt;/div&gt;
        ///&lt;/div&gt;
        ///
        ///&lt;div id=&quot;signature&quot;&gt;
        ///    Made by &lt;a href=&quot;https://antonmakesgames.itch.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AntonMakesGames&lt;/a&gt;
        ///&lt;/div&gt;
        ///
        ///&lt;script src=&quot;Card.js&quot;&gt;&lt;/script&gt;
        ///&lt;script src=&quot;Ca [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string GameIndex {
            get {
                return ResourceManager.GetString("GameIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class GameInfo {
        ///    constructor() {
        ///        this.RootNode = document.createElement(&quot;table&quot;);
        ///
        ///        var roundParagraph = document.createElement(&quot;p&quot;);
        ///        this.RootNode.appendChild(roundParagraph);
        ///        this.RoundLabel = document.createTextNode(&quot;&quot;);
        ///        roundParagraph.appendChild(this.RoundLabel);
        ///
        ///        var playerParagraph = document.createElement(&quot;p&quot;);
        ///        this.RootNode.appendChild(playerParagraph);
        ///        this.CurrentPlayerMessage = &quot;Current player : &quot;;
        ///        this.Curren [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string GameInfo {
            get {
                return ResourceManager.GetString("GameInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à const GameStateID = [
        ///    &quot;Initialize&quot;,
        ///    &quot;Playing&quot;,
        ///    &quot;Transitioning&quot;,
        ///    &quot;EndGame&quot;,
        ///    &quot;Unkown&quot;];
        ///
        ///const SigilLabel = [
        ///    &quot;Spade&quot;,
        ///    &quot;Club&quot;,
        ///    &quot;Heart&quot;,
        ///    &quot;Diamond&quot;];
        ///
        ///const SigilSymbol = [
        ///    &apos;\u2660&apos;,
        ///    &apos;\u2663&apos;,
        ///    &apos;\u2661&apos;,
        ///    &apos;\u2662&apos;];
        ///
        ///const ValueLabel = [
        ///    &quot;Ace&quot;,
        ///    &quot;2&quot;,
        ///    &quot;3&quot;,
        ///    &quot;4&quot;,
        ///    &quot;5&quot;,
        ///    &quot;6&quot;,
        ///    &quot;7&quot;,
        ///    &quot;8&quot;,
        ///    &quot;9&quot;,
        ///    &quot;10&quot;,
        ///];
        ///
        ///var websocket = null;
        ///var isConnected = false;
        ///var gameWebSocketUrl = document.URL.replace(&quot;http: [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string MultiplayerSolitaire {
            get {
                return ResourceManager.GetString("MultiplayerSolitaire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à     class Opponent {
        ///        constructor() {
        ///            this.RootNode = createElementWithClass(&quot;table&quot;, &quot;otherPlayer&quot;);
        ///
        ///            var row = document.createElement(&quot;tr&quot;);
        ///            this.RootNode.appendChild(row);
        ///            this.PlayerLabel = document.createTextNode(&quot;Player ?&quot;);
        ///            row.appendChild(this.PlayerLabel);
        ///
        ///            this.ScoreLabel = document.createTextNode(&quot;Score : &quot;);
        ///            this.HealthLabel = document.createTextNode(&quot;Health : &quot;);
        ///            this.ShieldLabel =  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Opponent {
            get {
                return ResourceManager.GetString("Opponent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class Player {
        ///    constructor() {
        ///        this.RootNode = createElementWithClass(&quot;table&quot;, &quot;player&quot;);
        ///        this.PlayerLabel = document.createTextNode(&quot;Player &quot; + localPlayerIndex);
        ///        var paragraph = document.createElement(&quot;p&quot;);
        ///        paragraph.appendChild(this.PlayerLabel);
        ///        this.RootNode.appendChild(paragraph);
        ///
        ///        this.Board = new CardDisplay();
        ///        this.RootNode.appendChild(this.Board.RootNode);
        ///
        ///        this.Hand = new CardDisplay();
        ///        this.RootNode.appendChi [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Player {
            get {
                return ResourceManager.GetString("Player", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class PlayerSlots {
        ///    constructor() {
        ///        this.RootNode = document.createElement(&quot;table&quot;);
        ///        this.Buttons = [];
        ///        var row = document.createElement(&quot;tr&quot;);
        ///        this.RootNode.appendChild(row);
        ///
        ///        this.PoolSize = 10;
        ///        for (var index = 0; index &lt; this.PoolSize; ++index) {
        ///            this.Buttons[index] = document.createElement(&quot;button&quot;);
        ///            var label = document.createTextNode(&quot;Player &quot; + (index + 1));
        ///            this.Buttons[index].appendChild(label);
        ///    [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PlayerSlots {
            get {
                return ResourceManager.GetString("PlayerSlots", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à class PooledLogTable {
        ///    constructor() {
        ///        this.RootNode = createElementWithClass(&quot;table&quot;, &quot;LogTable&quot;);
        ///        this.PoolSize = 10;
        ///        this.Pool = [];
        ///        for (var index = 0; index &lt; this.PoolSize; ++index)
        ///        {
        ///            this.Pool[index] = document.createElement(&quot;tr&quot;);
        ///            this.Pool[index].Label = document.createTextNode(&quot;&quot;);
        ///            this.Pool[index].appendChild(this.Pool[index].Label);
        ///        }
        ///
        ///        this.Count = 0;
        ///    }
        ///
        ///    Clear() {
        ///        clear [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PooledLogTable {
            get {
                return ResourceManager.GetString("PooledLogTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à #debugArea {
        ///    position: absolute;
        ///    top: 0pt;
        ///    right: 0pt;
        ///    text-align: right;
        ///    display: flex;
        ///    flex-direction: column;
        ///    align-items: end;
        ///    text-align: right;
        ///}
        ///
        ///#debugOutput {
        ///    border: 1pt;
        ///    border-color: black;
        ///    border-style: solid;
        ///    min-width: 300pt;
        ///    max-width: 50%;
        ///    text-align: left;
        ///    display:none;
        ///    background-color:white;
        ///
        ///}
        ///
        ///#output &gt; p {
        ///    overflow-wrap: break-word;
        ///}
        ///
        ///#output span {
        ///    color: blue;
        ///}
        ///
        ///#output span.erro [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Style {
            get {
                return ResourceManager.GetString("Style", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à function CreateWebSocket() {
        ///    console.log(gameWebSocketUrl);
        ///    websocket = new WebSocket(gameWebSocketUrl);
        ///
        ///    websocket.onopen = function (e) {
        ///        isConnected = true;
        ///        writeToScreen(&quot;CONNECTED&quot;);
        ///        var requestPlayerSlots = &apos;{ &quot;OrderType&quot;: &quot;RequestPlayerSlots&quot; }&apos;;
        ///        DoSend(requestPlayerSlots);
        ///    };
        ///
        ///    websocket.onclose = function (e) {
        ///        writeToScreen(&quot;DISCONNECTED&quot;);
        ///    };
        ///
        ///    websocket.onmessage = RecieveWebSocketMessage;
        ///
        ///    websocket.onerror = [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string WebSocket {
            get {
                return ResourceManager.GetString("WebSocket", resourceCulture);
            }
        }
    }
}
